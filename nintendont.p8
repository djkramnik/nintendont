pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
inity=96
nx=16
ny=inity
leftie=false
jumping=false
jtick=0
jdiv=8
jbtn=false
jrelease=true
vdisp=0
initv=15
v=0
g=9
btntick=0
btnrls=false
-- horizontal speed saga
hv=0
speed=0
running=false
maxrun=2.5
maxwalk=1.2
slowdown=false
maxspeed=0
spover=-1
ass="???"
fallmax=4
log=false

function _update()
  local t=0
  local powa=0
  local ydelta =0
  local xdelta = 0
  local nxtvdisp = 0
  local ogdisp = vdisp
  
  ass=touchgrass(nx,ny)
  -- extract out hv manip?  negative if leftie? if/elseif/else block at beginning?
  if (btn(0)) then
    leftie=true
    --nx-=1
    if (running and not jumping) then
     hv=-0.15
    else
     hv=-0.1
    end
   end

   if (btn(1)) then
    --nx+=1
    leftie=false
    if(running and not jumping) then
     hv=0.15
    else
     hv=0.1
    end
  end

  if (not btn(0) and not btn(1)) then
    if (speed > 0) then
      hv=-0.05
    elseif (speed < 0) then
      hv=0.05
    else
      hv=0
    end
  end
  if (btn(4)) then
    jbtn=true
  else
    jbtn=false
    jrelease=true
  end
  
  if (btn(5)) then
   running = true
  else
   running=false
  end
  
  powa=abs(speed)
  
  slowdown = powa <= maxrun 
  and powa > maxwalk 
  and not running
  
  if(not jumping) then
   local jtest=bejump(false,jbtn,ass,jrelease)
  
  if (jtest) then
    if (jbtn) then
     initv = running and 18 or 15
    else
     initv = 0
    end
  end  
  end
  -- i no this is fucked but i need this
  jumping= 
  bejump(jumping,jbtn,ass,jrelease)
  
  if(jumping) then
    v=initv
    jtick+=1
    t=(jtick/jdiv)
    if (jbtn and not btnrls and jtick<10) then
     btntick+=0.5
    else
     btnrls=true
    end
    v=initv+(btntick)
    nxtvdisp = ydiff(v,t,g)
    ydelta=nxtvdisp - vdisp
    ydelta=min(
    max(ydelta,fallmax*-1),
    fallmax)
    
    vdisp=nxtvdisp
  else
    v=0
    jtick=0
    vdisp=0
    btntick=0
    btnrls=false
  end
  
  if (slowdown) then
   maxspeed=powa
   --decrease our actual speed until we at max walk speed again
     if (speed > 0) then
      hv=-0.05
     else
      hv=0.05
     end
  elseif (running) then
   maxspeed=maxrun
  else
   maxspeed=maxwalk
  end
  
  speed = max(min(speed+hv
  ,maxspeed),maxspeed*-1)
  
  if (abs(speed) < 0.1) then
   speed=0
  end
  
  leftbump = bumpl(nx,ny)
  
  if (jumping) then
   xdelta=(speed/1.1)
  else
   xdelta=speed
  end 
  
  ny -= ydelta
  
  leftbump = bumpl(nx+xdelta,ny)
  rightbump = bumpr(nx+xdelta,ny)
  if (not rightbump and not leftbump) then
   nx += xdelta
  elseif(leftbump) then
   nx += xdelta
   if (leftie) then
    nx = nearestprevmultiple(flr(nx))
   end
   speed=0
  elseif(rightbump) then
   nx += xdelta
   if (not leftie) then
    nx = nearestmultiple(ceil(nx))
   end
   speed=0
  end
  
  if(touchgrass(nx,ny)) then
   log=true
   ny = nearestmultiple(flr(ny))  
  end
  
  if (ny > 128 or ny < 0) then
   ny = 0
  end
  if (nx > 128) then
   nx = 0
  elseif (nx < 0) then
   nx = 128
  end

end

function _draw()
 cls()
 spr(3,nx,ny,1,1,leftie)
 map()
 print(nx)
 print(ny)
 --print(jumping)
 --print(ass)
 --print(ny)
 --print("wtf"..tostr(mget(7,10)))
 --print(vdisp)
 --print(running)
 --print(jumping)
 --print("speed: "..tostr(speed))
 --print("maxspeed: "..tostr(maxspeed))
 --print("slowdown?: "..tostr(slowdown))
 --print(inity)
 --print(ny-vdisp)
end

-->8

-- so we have touched grass big deal
-- are we touching from the top

function nearestmultiple(n)
  if (n % 8 == 0) then
    return n
  else
    return nearestmultiple(n-1)
  end
end

--dont ask
function nearestprevmultiple(n)
if (n % 8 == 0) then
  return n
else
  return nearestprevmultiple(n+1)
end
end



function bejump(prev,jbtn,ass,jr)
  return not ass or (jbtn and not prev and jr)
end

function ydiff(v,t,g)
 return (v*t) - (0.5*g*t*t)
end


function bumpr(x,y)
  rx= x+8
  ry = y+4
  cxr = flr(rx/8)
  cyr = flr(ry/8)
  
  return mget(cxr,cyr)==2
end
--need to flr these?
function bumpl(x,y)
// round x and y to nearest 
  lx = x
  ly = y+4

  cxl = flr(lx/8)
  cyl = flr(ly/8)
 
  return mget(cxl,cyl)==2
end

function touchgrass(x,y)
  lx = x
  ly = y+8
  rx = x+8
  ry = y+8
  
  cxl = flr(lx/8)
  cyl = flr(ly/8)
  cxr = flr(rx/8)
  cyr = flr(ry/8)
  
  lt = mget(cxl,cyl) == 2
  rt = mget(cxr,cyr) == 2
  
  return lt or rt
end
__gfx__
00000000aa8888aabbbbbbbbbbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000a882228abbbbbbbbbbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700a8e2e28a44444444bbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000aae222aa44444444bbb0bb0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000aaeee2aa44444444bbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700a8e2e28a44444444bbbbbbbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000a8eee88a44444444bbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000aa8888aa44444444bbb0bbbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
3030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000300000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000300000020000303002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0202020202023030020202020202020230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
